import { connectorsForWallets } from '@rainbow-me/rainbowkit';
import {
  rainbowWallet,
  metaMaskWallet,
  coinbaseWallet,
} from '@rainbow-me/rainbowkit/wallets';
import { createConfig, http } from 'wagmi';
import {
  mainnet,
  bsc,
  arbitrum,
  base,
  blast,
  avalanche,
  polygon,
  scroll,
  optimism,
  linea,
  zkSync,
  polygonZkEvm,
  gnosis,
  fantom,
  moonriver,
  moonbeam,
  fuse,
  boba,
  mode,
  metis,
  lisk,
  aurora,
  sei,
  immutableZkEvm,
  flare,
  sonic,
  gravity,
  taiko,
  soneium,
  opBNB,
  cronos,
  fraxtal,
  rootstock,
  celo,
  worldchain,
  xdc,
  mantle,
  ink,
  berachain,
  kaia,
  apeChain,
} from 'wagmi/chains';

const connectors = connectorsForWallets(
  [
    {
      groupName: 'Recommended',
      wallets: [rainbowWallet, metaMaskWallet, coinbaseWallet],
    },
  ],
  {
    appName: 'Li.Fi API',
    projectId: 'dummy', // Required by RainbowKit but not used without WalletConnect
  }
);

const chains = [
  mainnet,
  bsc,
  arbitrum,
  base,
  blast,
  avalanche,
  polygon,
  scroll,
  optimism,
  linea,
  zkSync,
  polygonZkEvm,
  gnosis,
  fantom,
  moonriver,
  moonbeam,
  fuse,
  boba,
  mode,
  metis,
  lisk,
  aurora,
  sei,
  immutableZkEvm,
  flare,
  sonic,
  gravity,
  taiko,
  soneium,
  opBNB,
  cronos,
  fraxtal,
  rootstock,
  celo,
  worldchain,
  xdc,
  mantle,
  ink,
  berachain,
  kaia,
  apeChain,
] as const;

export const config = createConfig({
  connectors,
  chains,
  transports: chains.reduce((acc, chain) => ({
    ...acc,
    [chain.id]: http(),
  }), {} as Record<number, ReturnType<typeof http>>),
  ssr: true,
});